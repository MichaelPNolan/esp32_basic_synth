/**************************************************************************
 This was built out from example code for Adafruit's Monochrome OLEDs based on SSD1306 drivers

 *  Oct 12-15
 * Bug issue with using the display on one version of ESP32 - somehow different from another that I thought was the same, the way the core0 calls access the 
 * 1306 display library causes corruption. For example in easySynth, if you have the #ifdef DISPLAY_1306 you write to the screen using
 *      miniScreenString(3,1,"VoiRleas",HIGH);
 *      miniScreenBarSize(3, value);
 *    To this module "display-1306" that I've put togther
 *  So today Oct 15 I'm going to make some kind of indirect way of calling these commands without directly causing display (the instance of Adadfruit_1306)
 *  to be called while Core1 is being used. Its possible on one of my test ESP32 core 0 is running audio and display ... idk
 *  
 *  Oct 17 - After study a bit and ideas I decided to try volatile variables but that didn't seem good for String type if possible
 *  so then I started to change to use old char* type (null terminated) and old libraries hoping this kind of direct RAM allocation will be 
 *  better for multi-core ops. Also not ineffeciently wrting field names more often than needed especially when I dynamically allocate mem with new char to the string
 *  i don't know if I have to dealloc or if its auto in C++
 *  Got some signs that this can write to screen uncorrupted
 */

#ifdef DISPLAY_1306
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64
// OLED display height, in pixels
#define ROWS         8   // 8 pix high gives 8 * 8 for SCREEN of 64 high which is the 0.96" variation used for basic_synthv4
#define COLUMNS      2 
#define ZONES        16  //simply ROWS by COLUMNS 

#define OLED_RESET      -1// Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);



bool   wantsDisplayRefresh;  
//these are all arrays of 8 for the 4 rows and 2 columns that fit with text size 1 as set in init
String   zoneStrings[ZONES]; //Room for 8 char (maybe more) per zone (zone)
bool      zoneRedraw[ZONES];
uint8_t   zoneColor[ZONES]; //monochrome WHITE or BLACK
volatile uint8_t   zoneBarSize[ZONES] = {24,30,32,40,44,48,52,60,64,64,64,64,64,0,0};  //could be a rectangle of 64 pix width 8 pix height

void setup1306() {
  bool setupDisplayOK = display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS);  //SSD1306_EXTERNALVCC or SSD1306_SWITCHCAPVCC
  
  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!setupDisplayOK) {
    Serial.println(F("SSD1306 allocation failed"));
    //for(;;); // Don't proceed, loop forever
  } else {

  // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  
    Wire.setClock(1000000);
    display.clearDisplay();
    display.display();
    
    
    display.setTextSize(1);
    display.setTextColor(WHITE);
    for(int i = 0; i<ZONES; i++){
      zoneRedraw[i] = false;
      zoneStrings[i] = NULL;
    }  
    miniScreenString(0,1,"VolAttck",false);
    miniScreenString(1,1,"VolDecay",false);
    miniScreenString(2,1,"VolSus",false);
    miniScreenString(3,1,"VolRleas",false);
    miniScreenString(4,1,"FiltEnv_A",false);
    miniScreenString(5,1,"FiltEnv_D",false);
    miniScreenString(6,1,"FiltEnv_S",false);
    miniScreenString(7,1,"FiltEnv_R",false);
    miniScreenString(8,1,"DelyLngth",false);
    miniScreenString(9,1,"DelyMixLv",false);

    miniScreenString(14,1,"Love Supi",false);
    wantsDisplayRefresh = true;
    Serial.printf("Oled Init started successfully on");
    Serial.println(xPortGetCoreID());
  }

}
 void miniScreenString(uint8_t zone, uint8_t c, String s,bool refresh){
  if(zone > (ZONES-1)) return;  //don't try to write or do anything if this is in error
  //zoneStrings[zone] = new char(sizeof(s)+1);
  //strcpy(zoneStrings[zone], s);
  zoneColor[zone] = c;
  zoneRedraw[zone] = true;
  Serial.println(zoneStrings[zone]);
  if(refresh) {
    
    wantsDisplayRefresh = false;  //miniScreenRedraw(zone,0) was called in earlier version but we had garbage being written on one version of ESP32 due to different cores
  }
    //this should do all the zones set true for screenRefresh as second parameter
}


//prepares message but doesn't trigger display.display() because that messes with processing samples
//for zones on text size one they are 8 high (32 pix screen height) right half starts at 64
void miniScreenRedraw(uint8_t zone, bool screenRefresh){
  Serial.println("redraw from:"+xPortGetCoreID());
  uint8_t row, col;
  if(screenRefresh) { // then run through all the zones after clearing the display
    display.clearDisplay();
    for(int i = 0; i<ZONES; i++){
       if(strlen(zoneStrings[i]) > 0){
         if(i>1) row = i / 2; else row = 0;
         col = i % 2;
         display.setCursor(64*col,8*row);
    
         if(zoneColor[i])
            display.setTextColor(WHITE,BLACK);
         else
            display.setTextColor(BLACK,WHITE);
         
         if(zoneBarSize[i] > 0){
            //miniScreenBarDraw(i);
            display.println(zoneStrings[i]);
         } else
         display.println(zoneStrings[i]);// display.println(zoneStrings[i]);
       }
    }
    wantsDisplayRefresh = true;
  } else {  // just figure out this one zone reference and refresh that
    if(strlen(zoneStrings[zone]) > 0){
       if(zone>1) row = zone / 2; else row = 0;
       col = zone % 2;
       display.setCursor(64*col,8*row);
      // display.println("         "); //hopefully equivalent to clearDisplay for a single zone at this cursor
      //  display.setCursor(64*col,8*row);
       if(zoneColor[zone])
          display.setTextColor(WHITE,BLACK);
       else
          display.setTextColor(BLACK,WHITE);
       
       if(zoneBarSize[zone] > 0){
        //  miniScreenBarDraw(zone);
        display.println(zoneStrings[zone]);
       } else
       display.println(zoneStrings[zone]);//display.println(zoneStrings[zone]);
     }
     wantsDisplayRefresh = true;
  }
  
  
  //  display.display(); is called by displayRefresh on core0task loop but this loading the display memory can be called any time
}
 void miniScreenBarSize(uint8_t zone, float param){ //optimise to just update one zone for parameter adjusting to do less processing
  
  zoneBarSize[zone] = 64.0f * param;
  wantsDisplayRefresh = false;  //true but set false for debug
  zoneRedraw[zone] = true;
                 //miniScreenRedraw(zone, 0) this thing was called in earlier version - changed to wantsDisplayRefresh = HIGH; so SSD1306 lib function is called from Core0 
                 //sets the flag so that now miniScreenRedraw is called from the displayRefresh() function which I hope is only called by the Core0task
   // set this up to just update one zone
}
//char *strncpy(char *dest, const char *src, size_t n)
//Copies up to n characters from the string pointed to, by src to dest.

 void miniScreenBarDraw(uint8_t zone){
   int x,y;
   uint8_t fitInBar = zoneBarSize[zone]/7;
   if(zone>0) y = (zone / 2) * 8; else y = 0;
   x = (zone % 2) *64;
   display.drawRect(x,y, zoneBarSize[zone], 7, SSD1306_WHITE);
   display.setCursor(x,y);
    
   display.setTextColor(BLACK,WHITE);
    //numb of characters to fit in bar
     display.print(zoneStrings[zone]);
  // display.print(zoneStrings[zone].substring(0,fitInBar)); //reprint the text  myString.substring(from, to)
  // display.setTextColor(WHITE,BLACK);
   //display.print(zoneStrings[zone].substring(fitInBar)); 
    
 
  //  display.display(); is called by displayRefresh on core0task loop but this loading the display memory can be called any time
}



void displayRefresh()
{
  if(wantsDisplayRefresh){ 
    wantsDisplayRefresh = LOW;
    Serial.print(".");
    for(int zone = 0; zone < ZONES; zone++){
      if(zoneRedraw[zone]){
        miniScreenRedraw(zone,0);
        zoneRedraw[zone] = false;
      }
    }
    
    display.display();
  
  }
}




void testdrawline() {
  int16_t i;

  display.clearDisplay(); // Clear display buffer

  for(i=0; i<display.width(); i+=4) {
    display.drawLine(0, 0, i, display.height()-1, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn line
    delay(1);
  }
  for(i=0; i<display.height(); i+=4) {
    display.drawLine(0, 0, display.width()-1, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();

  for(i=0; i<display.width(); i+=4) {
    display.drawLine(0, display.height()-1, i, 0, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for(i=display.height()-1; i>=0; i-=4) {
    display.drawLine(0, display.height()-1, display.width()-1, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();

  for(i=display.width()-1; i>=0; i-=4) {
    display.drawLine(display.width()-1, display.height()-1, i, 0, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for(i=display.height()-1; i>=0; i-=4) {
    display.drawLine(display.width()-1, display.height()-1, 0, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  delay(250);

  display.clearDisplay();

  for(i=0; i<display.height(); i+=4) {
    display.drawLine(display.width()-1, 0, 0, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }
  for(i=0; i<display.width(); i+=4) {
    display.drawLine(display.width()-1, 0, i, display.height()-1, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000); // Pause for 2 seconds
}

void testdrawrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2; i+=2) {
    display.drawRect(i, i, display.width()-2*i, display.height()-2*i, SSD1306_WHITE);
    display.display(); // Update screen with each newly-drawn rectangle
    delay(1);
  }

  delay(2000);
}

void testfillrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2; i+=3) {
    // The INVERSE color is used so rectangles alternate white/black
    display.fillRect(i, i, display.width()-i*2, display.height()-i*2, SSD1306_INVERSE);
    display.display(); // Update screen with each newly-drawn rectangle
    delay(1);
  }

  delay(2000);
}

void testdrawcircle(void) {
  display.clearDisplay();

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=2) {
    display.drawCircle(display.width()/2, display.height()/2, i, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testfillcircle(void) {
  display.clearDisplay();

  for(int16_t i=max(display.width(),display.height())/2; i>0; i-=3) {
    // The INVERSE color is used so circles alternate white/black
    display.fillCircle(display.width() / 2, display.height() / 2, i, SSD1306_INVERSE);
    display.display(); // Update screen with each newly-drawn circle
    delay(1);
  }

  delay(2000);
}

void testdrawroundrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2-2; i+=2) {
    display.drawRoundRect(i, i, display.width()-2*i, display.height()-2*i,
      display.height()/4, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testfillroundrect(void) {
  display.clearDisplay();

  for(int16_t i=0; i<display.height()/2-2; i+=2) {
    // The INVERSE color is used so round-rects alternate white/black
    display.fillRoundRect(i, i, display.width()-2*i, display.height()-2*i,
      display.height()/4, SSD1306_INVERSE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testdrawtriangle(void) {
  display.clearDisplay();

  for(int16_t i=0; i<max(display.width(),display.height())/2; i+=5) {
    display.drawTriangle(
      display.width()/2  , display.height()/2-i,
      display.width()/2-i, display.height()/2+i,
      display.width()/2+i, display.height()/2+i, SSD1306_WHITE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testfilltriangle(void) {
  display.clearDisplay();

  for(int16_t i=max(display.width(),display.height())/2; i>0; i-=5) {
    // The INVERSE color is used so triangles alternate white/black
    display.fillTriangle(
      display.width()/2  , display.height()/2-i,
      display.width()/2-i, display.height()/2+i,
      display.width()/2+i, display.height()/2+i, SSD1306_INVERSE);
    display.display();
    delay(1);
  }

  delay(2000);
}

void testdrawchar(void) {
  display.clearDisplay();

  display.setTextSize(1);      // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE); // Draw white text
  display.setCursor(0, 0);     // Start at top-left corner
  display.cp437(true);         // Use full 256 char 'Code Page 437' font

  // Not all the characters will fit on the display. This is normal.
  // Library will draw what it can and the rest will be clipped.
  for(int16_t i=0; i<256; i++) {
    if(i == '\n') display.write(' ');
    else          display.write(i);
  }

  display.display();
  delay(2000);
}

void testdrawstyles(void) {
  display.clearDisplay();

  display.setTextSize(1);             // Normal 1:1 pixel scale
  display.setTextColor(SSD1306_WHITE);        // Draw white text
  display.setCursor(0,0);             // Start at top-left corner
  display.println(F("Hello, world!"));

  display.setTextColor(SSD1306_BLACK, SSD1306_WHITE); // Draw 'inverse' text
  display.println(3.141592);

  display.setTextSize(2);             // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.print(F("0x")); display.println(0xDEADBEEF, HEX);

  display.display();
  delay(2000);
}

void testscrolltext(void) {
  display.clearDisplay();

  display.setTextSize(2); // Draw 2X-scale text
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 0);
  display.println(F("scroll"));
  display.display();      // Show initial text
  delay(100);

  // Scroll in various directions, pausing in-between:
  display.startscrollright(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);
  display.startscrollleft(0x00, 0x0F);
  delay(2000);
  display.stopscroll();
  delay(1000);
  display.startscrolldiagright(0x00, 0x07);
  delay(2000);
  display.startscrolldiagleft(0x00, 0x07);
  delay(2000);
  display.stopscroll();
  delay(1000);
}

#define XPOS   0 // Indexes into the 'icons' array in function below
#define YPOS   1
#define DELTAY 2


#endif
